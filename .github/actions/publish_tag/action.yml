name: "Publish a tag"
description: "A reusable workflow that's used to publish a tag"
inputs:
  tag:
    description: "tag to publish"
    required: true
  github_token:
    # Composite workflows do not have access to secrets so they have to be passed in
    description: "GitHub Token"
    required: true

runs:
  using: "composite"
  steps:
    - name: Log tag
      shell: bash
      run: |
        echo "Going to tag '${{ inputs.tag }}'!"
    - shell: bash
      run: |
        mkdir -p ${{github.workspace}}/artifacts
    - uses: actions/download-artifact@v4
      with:
        path: ${{github.workspace}}/artifacts
    - name: Display structure of downloaded files
      shell: bash
      run: |
        ls -R artifacts

    - name: Consolidate version information
      shell: bash
      run: |
        # Create a JSON file with consolidated version information
        echo '{' > ${{github.workspace}}/consolidated_versions.json
        echo '  "release_tag": "${{ inputs.tag }}",' >> ${{github.workspace}}/consolidated_versions.json
        echo '  "generated_at": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",' >> ${{github.workspace}}/consolidated_versions.json
        echo '  "platforms": [' >> ${{github.workspace}}/consolidated_versions.json

        # Find all version_info.json files and consolidate them
        FIRST=true
        find ${{github.workspace}}/artifacts -name "version_info.json" | sort | while read version_file; do
          if [ "$FIRST" = true ]; then
            FIRST=false
          else
            echo ',' >> ${{github.workspace}}/consolidated_versions.json
          fi
          # Extract the content without the outer braces
          cat "$version_file" | sed '1d;$d' | sed 's/^  /    /' >> ${{github.workspace}}/consolidated_versions.json
        done

        echo '  ]' >> ${{github.workspace}}/consolidated_versions.json
        echo '}' >> ${{github.workspace}}/consolidated_versions.json

        # Also create a human-readable markdown version for the release notes
        echo "# Buck2 Version Information - Release ${{ inputs.tag }}" > ${{github.workspace}}/versions_summary.md
        echo "Generated on $(date -u)" >> ${{github.workspace}}/versions_summary.md
        echo "" >> ${{github.workspace}}/versions_summary.md
        echo "## Version Information by Platform" >> ${{github.workspace}}/versions_summary.md
        echo "" >> ${{github.workspace}}/versions_summary.md

        # Find all version_info.json files and add them to the markdown
        find ${{github.workspace}}/artifacts -name "version_info.json" | sort | while read version_file; do
          platform=$(jq -r '.platform' "$version_file")
          version=$(jq -r '.version_output' "$version_file")

          echo "### Platform: $platform" >> ${{github.workspace}}/versions_summary.md
          echo "" >> ${{github.workspace}}/versions_summary.md
          echo '```' >> ${{github.workspace}}/versions_summary.md
          echo "$version" >> ${{github.workspace}}/versions_summary.md
          echo '```' >> ${{github.workspace}}/versions_summary.md
          echo "" >> ${{github.workspace}}/versions_summary.md
        done

        # Copy the consolidated files to artifacts directory
        cp ${{github.workspace}}/consolidated_versions.json ${{github.workspace}}/artifacts/
        cp ${{github.workspace}}/versions_summary.md ${{github.workspace}}/artifacts/
    - uses: pyTooling/Actions/releaser@adef08d3bdef092282614f3b683897cefae82ee3 # v0.4.6
      id: upload_attempt_1
      with:
        token: ${{ inputs.github_token }}
        tag: '${{ inputs.tag }}'
        files: ${{github.workspace}}/artifacts/**
        rm: false # do not clean past assets
      # This needs to be true to proceed to the next step of failure
      continue-on-error: true
    # If the upload fails, retry. This usually solves the problem.
    - name: Some action that can fail
      # Only run this step if upload_attempt_1 fails.
      if: steps.upload_attempt_1.outcome == 'failure'
      uses: pyTooling/Actions/releaser@adef08d3bdef092282614f3b683897cefae82ee3 # v0.4.6
      with:
        token: ${{ inputs.github_token }}
        tag: '${{ inputs.tag }}'
        files: ${{github.workspace}}/artifacts/**
        rm: false # do not clean past assets
    - name: Post a summary
      shell: bash
      run: |
        # GITHUB_REPOSITORY is used below to allow this action to work on forks
        cat <<EOF >> $GITHUB_STEP_SUMMARY
        # `${{ inputs.tag }}` Release Complete! :rocket:
        For the public download links of these build artifacts, please see:
          <https://github.com/$GITHUB_REPOSITORY/releases/tag/${{ inputs.tag }}>

        ## Release Information
        - Version information for all platforms is available in:
          - JSON format: \`consolidated_versions.json\` (machine-readable)
          - Markdown format: \`versions_summary.md\` (human-readable)
        - SHA-256 hashes for all binaries are available in \`consolidated_hashes.md\` (if present)

        Always verify the integrity of downloaded binaries before use.
        EOF
